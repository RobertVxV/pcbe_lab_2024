{"ast":null,"code":"var _jsxFileName = \"/home/denisa/Desktop/pcbe/pcbe_lab_2024/frontend/src/App.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Inițializarea celulelor (10x10 grilă, fiecare celulă este vie sau moartă)\nconst createInitialGrid = (rows, cols) => {\n  const grid = [];\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push({\n        alive: Math.random() > 0.7\n      }); // Random: 30% celule vii\n    }\n    grid.push(row);\n  }\n  return grid;\n};\nfunction App() {\n  const [grid, setGrid] = useState(createInitialGrid(10, 10));\n  const [isRunning, setIsRunning] = useState(false);\n\n  // Funcție pentru a simula următorul pas al jocului\n  const nextStep = () => {\n    setGrid(prevGrid => {\n      const newGrid = prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n        // Reguli Game of Life (simplificat)\n        const liveNeighbors = countLiveNeighbors(prevGrid, rowIndex, colIndex);\n        if (cell.alive) {\n          return liveNeighbors === 2 || liveNeighbors === 3 ? {\n            ...cell\n          } : {\n            alive: false\n          };\n        } else {\n          return liveNeighbors === 3 ? {\n            alive: true\n          } : {\n            alive: false\n          };\n        }\n      }));\n      return newGrid;\n    });\n  };\n\n  // Numără vecinii vii ai unei celule\n  const countLiveNeighbors = (grid, rowIndex, colIndex) => {\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let count = 0;\n    directions.forEach(([x, y]) => {\n      const newRow = rowIndex + x;\n      const newCol = colIndex + y;\n      if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n        if (grid[newRow][newCol].alive) count++;\n      }\n    });\n    return count;\n  };\n\n  // Controlați jocul cu butonul \"Start/Stop\"\n  useEffect(() => {\n    if (isRunning) {\n      const interval = setInterval(nextStep, 500); // Pași la fiecare 500ms\n      return () => clearInterval(interval); // Curățare interval la oprire\n    }\n  }, [isRunning, nextStep]); // Adăugăm nextStep în lista de dependențe\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Game of Life\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(10, 20px)` // 10 coloane, câte 20px lățime\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, grid.flatMap((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${rowIndex}-${colIndex}`,\n    style: {\n      width: \"20px\",\n      height: \"20px\",\n      backgroundColor: cell.alive ? \"green\" : \"white\",\n      border: \"1px solid black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setIsRunning(!isRunning),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, isRunning ? \"Stop\" : \"Start\"));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","createInitialGrid","rows","cols","grid","i","row","j","push","alive","Math","random","App","setGrid","isRunning","setIsRunning","nextStep","prevGrid","newGrid","map","rowIndex","cell","colIndex","liveNeighbors","countLiveNeighbors","directions","count","forEach","x","y","newRow","newCol","length","interval","setInterval","clearInterval","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","flatMap","key","width","height","backgroundColor","border","onClick"],"sources":["/home/denisa/Desktop/pcbe/pcbe_lab_2024/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// Inițializarea celulelor (10x10 grilă, fiecare celulă este vie sau moartă)\nconst createInitialGrid = (rows, cols) => {\n    const grid = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            row.push({ alive: Math.random() > 0.7 }); // Random: 30% celule vii\n        }\n        grid.push(row);\n    }\n    return grid;\n};\n\nfunction App() {\n    const [grid, setGrid] = useState(createInitialGrid(10, 10));\n    const [isRunning, setIsRunning] = useState(false);\n\n    // Funcție pentru a simula următorul pas al jocului\n    const nextStep = () => {\n        setGrid((prevGrid) => {\n            const newGrid = prevGrid.map((row, rowIndex) =>\n                row.map((cell, colIndex) => {\n                    // Reguli Game of Life (simplificat)\n                    const liveNeighbors = countLiveNeighbors(prevGrid, rowIndex, colIndex);\n                    if (cell.alive) {\n                        return liveNeighbors === 2 || liveNeighbors === 3\n                            ? { ...cell }\n                            : { alive: false };\n                    } else {\n                        return liveNeighbors === 3\n                            ? { alive: true }\n                            : { alive: false };\n                    }\n                })\n            );\n            return newGrid;\n        });\n    };\n\n    // Numără vecinii vii ai unei celule\n    const countLiveNeighbors = (grid, rowIndex, colIndex) => {\n        const directions = [\n            [-1, -1], [-1, 0], [-1, 1],\n            [0, -1],          [0, 1],\n            [1, -1], [1, 0], [1, 1]\n        ];\n        let count = 0;\n        directions.forEach(([x, y]) => {\n            const newRow = rowIndex + x;\n            const newCol = colIndex + y;\n            if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length) {\n                if (grid[newRow][newCol].alive) count++;\n            }\n        });\n        return count;\n    };\n\n    // Controlați jocul cu butonul \"Start/Stop\"\n    useEffect(() => {\n        if (isRunning) {\n            const interval = setInterval(nextStep, 500); // Pași la fiecare 500ms\n            return () => clearInterval(interval); // Curățare interval la oprire\n        }\n    }, [isRunning, nextStep]); // Adăugăm nextStep în lista de dependențe\n\n    return (\n        <div className=\"App\">\n            <h1>Game of Life</h1>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: `repeat(10, 20px)`, // 10 coloane, câte 20px lățime\n                }}\n            >\n                {grid.flatMap((row, rowIndex) =>\n                    row.map((cell, colIndex) => (\n                        <div\n                            key={`${rowIndex}-${colIndex}`}\n                            style={{\n                                width: \"20px\",\n                                height: \"20px\",\n                                backgroundColor: cell.alive ? \"green\" : \"white\",\n                                border: \"1px solid black\",\n                            }}\n                        />\n                    ))\n                )}\n            </div>\n            <button onClick={() => setIsRunning(!isRunning)}>\n                {isRunning ? \"Stop\" : \"Start\"}\n            </button>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}